# Importing necessary Libraries
import tensorflow as tf
from tensorflow import keras


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random


# Import dataset & split into train and test data
mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()


# Length of the training dataset
len(x_train)
len(y_train)


# Length of the testing dataset
len(x_test)
len(y_test)


# Shape of the training dataset
x_train.shape


# Shape of the testing dataset
x_test.shape


# See first Image Matrix
x_train[0]


# See first image
plt.matshow(x_train[0])


# Normalize the iamges by scaling pixel intensities to the range 0,1
x_train=x_train/255
x_test=x_test/255


# See first Naormalize Image Matrix
x_train[0]


model=keras.Sequential([
  # Input Layer
  keras.layers.Flatten(input_shape = (28,28)),
  # Hidden Layer
  keras.layers.Dense(128,activation ='relu'),
  # Output Layer
  keras.layers.Dense(20,activation = 'softmax')
])


model.summary()


# Compile the Model
model.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])


history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10)


test_loss,test_acc=model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)


n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()


predicted_value=model.predict(x_test)
print("Handwritten number is = %d" %np.argmax(predicted_value[n]))


history.history.keys()


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Training Loss & Accuracy')
plt.ylabel('accuracy/loss')
plt.xlabel('epoch')
plt.legend(['loss', 'accuracy', 'val_loss', 'val_accuracy'])
plt.show()